# -*- coding: utf-8 -*-
"""mini project.ipnb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hkb3EzJmUVGbqkBQQSGZ7cR3hanN94Cc
"""

from google.colab import drive
drive.mount('/content/drive')

"""Importing the Dependencis"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

"""Data collection and analysis"""

# load the data from csv file to a panda Dataframe
insurance_dataset = pd.read_csv('/content/Medical_insurance.csv')

#first five row of the dataframe
insurance_dataset.head()

# number of rows and columns
insurance_dataset.shape

#getting some information about dataset
insurance_dataset.info()

"""Categorial Features:
-Sex
-Smoker
-Region
"""

#checking for missing values
insurance_dataset.isnull().sum()

"""Data Analysis"""

# statical measures of the dataset
insurance_dataset.describe()

#distribution of age value
sns.set()
plt.figure(figsize=(6,6))
sns.distplot(insurance_dataset['age'])
plt.title('Age Distribution')
plt.show()

#Gender Column
plt.figure(figsize=(6,6))
sns.countplot(x='sex',data=insurance_dataset)
plt.title('Sex Distribution')
plt.show()

insurance_dataset['sex'].value_counts()

# BMI Distribution
plt.figure(figsize=(6,6))
sns.distplot(insurance_dataset['bmi'])
plt.title('BMI Distribution')
plt.show()

"""Normal Bmi Range --> 18.5 To 24.9"""

#children column
plt.figure(figsize=(6,6))
sns.countplot(x='children',data=insurance_dataset)
plt.title('Children')
plt.show()

insurance_dataset['children'].value_counts()

#Smoker column
plt.figure(figsize=(6,6))
sns.countplot(x='smoker',data=insurance_dataset)
plt.title('smoker')
plt.show()

insurance_dataset['smoker'].value_counts()

#region column
plt.figure(figsize=(6,6))
sns.countplot(x='region',data=insurance_dataset)
plt.title('region')
plt.show()

insurance_dataset['region'].value_counts()

#  Distribution of chares values
plt.figure(figsize=(6,6))
sns.distplot(insurance_dataset['charges'])
plt.title('charges Distribution')
plt.show()

"""Data Pre-Processing

Encoding the categorial feature
"""

#encoding the sex column
insurance_dataset.replace({'sex':{'male':0, 'female':1}}, inplace=True)

#encoding smoker column
insurance_dataset.replace({'smoker':{'yes':0, 'no':1}}, inplace=True)

#encoding region column
insurance_dataset.replace({'region':{'southeast':0,'southwest':1,'northeast':2,'northwest':3}}, inplace=True)

"""Splitting the feature and Target"""

X= insurance_dataset.drop(columns='charges',axis=1)
Y= insurance_dataset['charges']

print(X)

print(Y)

"""Splitting the data into Training data and Teasting Data"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Liner Regeression"""

#Loading the linear Regression Model
regressor = LinearRegression()

regressor.fit(X_train , Y_train)

"""Model Evaluation"""

#prededction of training data
training_data_prediction = regressor.predict(X_train)

# R square value
r2_train = metrics.r2_score(Y_train, training_data_prediction)
print('R squared value : ' , r2_train)

#prededction of test data
test_data_prediction = regressor.predict(X_test)

# R square value
r2_test = metrics.r2_score(Y_test, test_data_prediction)
print('R squared value : ' , r2_test)

"""Building a Predective Data"""

input_data =(31,1,25.74,0,1,0)

input_data_as_numpy_array = np.asarray(input_data)

input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)


prediction=regressor.predict(input_data_reshaped)

print(prediction)

